apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service
  namespace: auth-service
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: rbac
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: auth-service
  name: auth-service-role
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: rbac
rules:
# Allow reading ConfigMaps and Secrets
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Allow reading pods for service discovery
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
# Allow reading services for health checks
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]
# Allow creating events for logging
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: auth-service-rolebinding
  namespace: auth-service
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: auth-service
  namespace: auth-service
roleRef:
  kind: Role
  name: auth-service-role
  apiGroup: rbac.authorization.k8s.io
---
# ClusterRole for monitoring and metrics collection
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: auth-service-metrics
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: metrics
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/metrics", "pods", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: auth-service-metrics
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: metrics
subjects:
- kind: ServiceAccount
  name: auth-service
  namespace: auth-service
roleRef:
  kind: ClusterRole
  name: auth-service-metrics
  apiGroup: rbac.authorization.k8s.io
---
# Pod Security Policy (if PSP is enabled)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: auth-service-psp
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'secret'
    - 'persistentVolumeClaim'
    - 'emptyDir'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  runAsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  readOnlyRootFilesystem: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: auth-service-psp
  namespace: auth-service
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - auth-service-psp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: auth-service-psp
  namespace: auth-service
roleRef:
  kind: Role
  name: auth-service-psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: auth-service
  namespace: auth-service