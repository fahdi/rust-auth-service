name: Minimal CI Pipeline

on:
  push:
    branches: [ main, develop, milestone-4-advanced-auth ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Essential compilation and formatting checks only
  basic-checks:
    name: Basic Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Basic compilation check
      run: cargo check

    - name: Run clippy (warnings allowed)
      run: cargo clippy --all-targets --all-features
      continue-on-error: true

  # Unit tests without database dependencies  
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: basic-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Run unit tests (lib only)
      run: cargo test --lib

    - name: Run binary tests
      run: cargo test --bins
      continue-on-error: true

  # Security audit (with known exceptions)
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: basic-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Run dependency analysis
      run: cargo deny check

  # Docker build test (simplified)
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: basic-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: rust-auth-service:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Summary job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [basic-checks, unit-tests, security-audit, docker-build]
    if: always()
    
    steps:
    - name: Check success
      run: |
        if [[ "${{ needs.basic-checks.result }}" == "success" && 
              "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.security-audit.result }}" == "success" && 
              "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "✅ All essential CI checks passed!"
        else
          echo "❌ Some CI checks failed:"
          echo "  Basic checks: ${{ needs.basic-checks.result }}"
          echo "  Unit tests: ${{ needs.unit-tests.result }}"
          echo "  Security audit: ${{ needs.security-audit.result }}"
          echo "  Docker build: ${{ needs.docker-build.result }}"
          exit 1
        fi