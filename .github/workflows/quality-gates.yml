name: Quality Gates & Enforcement

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

# Strict concurrency control for quality gates
concurrency:
  group: quality-gates-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # MANDATORY QUALITY CHECKS
  mandatory-quality-checks:
    name: Mandatory Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.pull_request.draft == false
    
    outputs:
      coverage-percent: ${{ steps.coverage.outputs.percent }}
      security-score: ${{ steps.security.outputs.score }}
      performance-score: ${{ steps.performance.outputs.score }}

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-quality-${{ hashFiles('**/Cargo.lock') }}

    - name: Install quality tools
      run: |
        cargo install cargo-tarpaulin cargo-audit cargo-deny

    # GATE 1: CODE FORMATTING (MANDATORY)
    - name: üö™ Gate 1 - Code Formatting
      run: |
        echo "üö™ Quality Gate 1: Code Formatting"
        if cargo fmt --all -- --check; then
          echo "‚úÖ Code formatting: PASSED"
        else
          echo "‚ùå Code formatting: FAILED"
          echo "Run 'cargo fmt' to fix formatting issues"
          exit 1
        fi

    # GATE 2: COMPILATION (MANDATORY)
    - name: üö™ Gate 2 - Compilation
      run: |
        echo "üö™ Quality Gate 2: Compilation"
        if cargo check --lib; then
          echo "‚úÖ Compilation: PASSED"
        else
          echo "‚ùå Compilation: FAILED"
          exit 1
        fi

    # GATE 3: LINTING (MANDATORY)
    - name: üö™ Gate 3 - Linting
      run: |
        echo "üö™ Quality Gate 3: Linting"
        if cargo clippy --lib -- \
          -D warnings \
          -D clippy::all \
          -A clippy::uninlined-format-args \
          -A clippy::derivable-impls \
          -A clippy::if-same-then-else \
          -A clippy::needless-question-mark \
          -A clippy::needless-return \
          -A clippy::module-name-repetitions; then
          echo "‚úÖ Linting: PASSED"
        else
          echo "‚ùå Linting: FAILED"
          exit 1
        fi

    # GATE 4: UNIT TESTS (MANDATORY)
    - name: üö™ Gate 4 - Unit Tests
      run: |
        echo "üö™ Quality Gate 4: Unit Tests"
        if cargo test --lib --verbose; then
          echo "‚úÖ Unit Tests: PASSED"
        else
          echo "‚ùå Unit Tests: FAILED"
          exit 1
        fi

    # GATE 5: SECURITY AUDIT (MANDATORY)
    - name: üö™ Gate 5 - Security Audit
      id: security
      run: |
        echo "üö™ Quality Gate 5: Security Audit"
        
        # Run cargo audit
        audit_result=0
        if cargo audit --ignore RUSTSEC-2023-0071; then
          echo "‚úÖ Dependency audit: PASSED"
          audit_score=25
        else
          echo "‚ùå Dependency audit: FAILED"
          audit_result=1
          audit_score=0
        fi
        
        # Run cargo deny
        deny_result=0
        if cargo deny check licenses; then
          echo "‚úÖ License compliance: PASSED"
          license_score=25
        else
          echo "‚ùå License compliance: FAILED"
          deny_result=1
          license_score=0
        fi
        
        # Calculate security score
        security_score=$((audit_score + license_score))
        echo "score=$security_score" >> $GITHUB_OUTPUT
        
        if [ $audit_result -eq 0 ] && [ $deny_result -eq 0 ]; then
          echo "‚úÖ Security Audit: PASSED (Score: $security_score/50)"
        else
          echo "‚ùå Security Audit: FAILED (Score: $security_score/50)"
          exit 1
        fi

    # GATE 6: TEST COVERAGE (MANDATORY)
    - name: üö™ Gate 6 - Test Coverage
      id: coverage
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/auth_test?authSource=admin
        REDIS_URL: redis://localhost:6379
      run: |
        echo "üö™ Quality Gate 6: Test Coverage"
        
        # Wait for services
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        timeout 30 bash -c 'until mongosh --host localhost:27017 --username admin --password password --eval "db.adminCommand(\"ping\")" --quiet; do sleep 1; done'
        
        # Run coverage analysis
        cargo tarpaulin \
          --lib \
          --timeout 120 \
          --out Stdout \
          --exclude-files "src/main.rs" \
          --exclude-files "src/bin/*" \
          > coverage_output.txt
        
        # Extract coverage percentage
        coverage_percent=$(grep -oE "[0-9]+\.[0-9]+% coverage" coverage_output.txt | grep -oE "[0-9]+\.[0-9]+" | tail -1)
        echo "percent=$coverage_percent" >> $GITHUB_OUTPUT
        
        # Define thresholds
        MINIMUM_COVERAGE=70
        TARGET_COVERAGE=80
        
        coverage_int=$(echo "$coverage_percent" | cut -d'.' -f1)
        
        if [ "$coverage_int" -ge "$TARGET_COVERAGE" ]; then
          echo "‚úÖ Test Coverage: EXCELLENT ($coverage_percent% ‚â• $TARGET_COVERAGE%)"
        elif [ "$coverage_int" -ge "$MINIMUM_COVERAGE" ]; then
          echo "‚úÖ Test Coverage: PASSED ($coverage_percent% ‚â• $MINIMUM_COVERAGE%)"
        else
          echo "‚ùå Test Coverage: FAILED ($coverage_percent% < $MINIMUM_COVERAGE%)"
          exit 1
        fi

    # GATE 7: DOCUMENTATION (MANDATORY)
    - name: üö™ Gate 7 - Documentation
      run: |
        echo "üö™ Quality Gate 7: Documentation"
        
        # Check that documentation builds
        if cargo doc --lib --no-deps --document-private-items --quiet; then
          echo "‚úÖ Documentation builds: PASSED"
        else
          echo "‚ùå Documentation builds: FAILED"
          exit 1
        fi
        
        # Check for missing documentation
        missing_docs=$(cargo doc --lib --no-deps --document-private-items 2>&1 | grep -c "warning.*missing documentation" || echo "0")
        
        if [ "$missing_docs" -le 5 ]; then
          echo "‚úÖ Documentation coverage: PASSED ($missing_docs missing docs)"
        else
          echo "‚ùå Documentation coverage: FAILED ($missing_docs missing docs > 5)"
          exit 1
        fi

  # PERFORMANCE QUALITY GATES
  performance-quality-gates:
    name: Performance Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: mandatory-quality-checks

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-perf-${{ hashFiles('**/Cargo.lock') }}

    # GATE 8: BUILD PERFORMANCE
    - name: üö™ Gate 8 - Build Performance
      run: |
        echo "üö™ Quality Gate 8: Build Performance"
        
        # Clean build
        cargo clean
        
        # Time the build
        start_time=$(date +%s)
        cargo build --lib --release
        end_time=$(date +%s)
        
        build_time=$((end_time - start_time))
        echo "Build time: ${build_time} seconds"
        
        # Threshold: 5 minutes
        BUILD_THRESHOLD=300
        
        if [ "$build_time" -le "$BUILD_THRESHOLD" ]; then
          echo "‚úÖ Build Performance: PASSED (${build_time}s ‚â§ ${BUILD_THRESHOLD}s)"
        else
          echo "‚ö†Ô∏è  Build Performance: WARNING (${build_time}s > ${BUILD_THRESHOLD}s)"
          # Don't fail on build performance, just warn
        fi

    # GATE 9: TEST PERFORMANCE
    - name: üö™ Gate 9 - Test Performance
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/auth_test?authSource=admin
        REDIS_URL: redis://localhost:6379
      run: |
        echo "üö™ Quality Gate 9: Test Performance"
        
        # Wait for services
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        timeout 30 bash -c 'until mongosh --host localhost:27017 --username admin --password password --eval "db.adminCommand(\"ping\")" --quiet; do sleep 1; done'
        
        # Time the tests
        start_time=$(date +%s)
        cargo test --lib --release -- --test-threads=1
        end_time=$(date +%s)
        
        test_time=$((end_time - start_time))
        echo "Test time: ${test_time} seconds"
        
        # Threshold: 2 minutes
        TEST_THRESHOLD=120
        
        if [ "$test_time" -le "$TEST_THRESHOLD" ]; then
          echo "‚úÖ Test Performance: PASSED (${test_time}s ‚â§ ${TEST_THRESHOLD}s)"
        else
          echo "‚ö†Ô∏è  Test Performance: WARNING (${test_time}s > ${TEST_THRESHOLD}s)"
          # Don't fail on test performance, just warn
        fi

  # INTEGRATION QUALITY GATES
  integration-quality-gates:
    name: Integration Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: mandatory-quality-checks

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password

      postgresql:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: auth_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}

    # GATE 10: INTEGRATION TESTS
    - name: üö™ Gate 10 - Integration Tests
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/auth_test
        MONGODB_URL: mongodb://admin:password@localhost:27017/auth_test?authSource=admin
        REDIS_URL: redis://localhost:6379
      run: |
        echo "üö™ Quality Gate 10: Integration Tests"
        
        # Wait for all services
        timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        timeout 60 bash -c 'until mongosh --host localhost:27017 --username admin --password password --eval "db.adminCommand(\"ping\")" --quiet; do sleep 1; done'
        
        # Run integration tests
        if cargo test --test "*" --verbose -- --test-threads=1; then
          echo "‚úÖ Integration Tests: PASSED"
        else
          echo "‚ùå Integration Tests: FAILED"
          exit 1
        fi

    # GATE 11: DATABASE COMPATIBILITY
    - name: üö™ Gate 11 - Database Compatibility
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/auth_test?authSource=admin
        POSTGRESQL_URL: postgresql://postgres:password@localhost:5432/auth_test
        REDIS_URL: redis://localhost:6379
      run: |
        echo "üö™ Quality Gate 11: Database Compatibility"
        
        # Test each database adapter
        databases=("mongodb" "postgresql")
        all_passed=true
        
        for db in "${databases[@]}"; do
          echo "Testing $db compatibility..."
          
          if cargo test --test "${db}_tests" --verbose; then
            echo "‚úÖ $db compatibility: PASSED"
          else
            echo "‚ùå $db compatibility: FAILED"
            all_passed=false
          fi
        done
        
        if [ "$all_passed" = true ]; then
          echo "‚úÖ Database Compatibility: PASSED"
        else
          echo "‚ùå Database Compatibility: FAILED"
          exit 1
        fi

  # FINAL QUALITY GATE VALIDATION
  final-quality-validation:
    name: Final Quality Gate Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [mandatory-quality-checks, performance-quality-gates, integration-quality-gates]
    if: always()

    steps:
    - name: Calculate overall quality score
      id: quality-score
      run: |
        echo "Calculating overall quality score..."
        
        # Base scores from mandatory checks
        MANDATORY_SCORE=0
        if [ "${{ needs.mandatory-quality-checks.result }}" = "success" ]; then
          MANDATORY_SCORE=70  # 70% for passing all mandatory gates
        fi
        
        # Performance bonus
        PERFORMANCE_BONUS=0
        if [ "${{ needs.performance-quality-gates.result }}" = "success" ]; then
          PERFORMANCE_BONUS=15  # 15% bonus for performance
        fi
        
        # Integration bonus
        INTEGRATION_BONUS=0
        if [ "${{ needs.integration-quality-gates.result }}" = "success" ]; then
          INTEGRATION_BONUS=15  # 15% bonus for integration
        fi
        
        TOTAL_SCORE=$((MANDATORY_SCORE + PERFORMANCE_BONUS + INTEGRATION_BONUS))
        echo "score=$TOTAL_SCORE" >> $GITHUB_OUTPUT
        
        echo "Quality Score Breakdown:"
        echo "- Mandatory Gates: $MANDATORY_SCORE/70"
        echo "- Performance Bonus: $PERFORMANCE_BONUS/15"
        echo "- Integration Bonus: $INTEGRATION_BONUS/15"
        echo "- Total Score: $TOTAL_SCORE/100"

    - name: Generate quality gate report
      run: |
        cat > quality-gate-report.md << EOF
        # Quality Gate Report
        
        **Generated**: $(date)
        **Overall Score**: ${{ steps.quality-score.outputs.score }}/100
        
        ## Gate Results
        
        ### Mandatory Quality Gates (Required)
        - **Status**: ${{ needs.mandatory-quality-checks.result }}
        - **Coverage**: ${{ needs.mandatory-quality-checks.outputs.coverage-percent }}%
        - **Security Score**: ${{ needs.mandatory-quality-checks.outputs.security-score }}/50
        
        ### Performance Quality Gates (Bonus)
        - **Status**: ${{ needs.performance-quality-gates.result }}
        - **Build Performance**: Checked
        - **Test Performance**: Checked
        
        ### Integration Quality Gates (Bonus)
        - **Status**: ${{ needs.integration-quality-gates.result }}
        - **Integration Tests**: Verified
        - **Database Compatibility**: Verified
        
        ## Quality Assessment
        EOF
        
        SCORE=${{ steps.quality-score.outputs.score }}
        
        if [ $SCORE -ge 95 ]; then
          echo "üü¢ **EXCELLENT** - Exceptional quality standards met" >> quality-gate-report.md
        elif [ $SCORE -ge 85 ]; then
          echo "üü¢ **GOOD** - High quality standards met" >> quality-gate-report.md
        elif [ $SCORE -ge 70 ]; then
          echo "üü° **ACCEPTABLE** - Minimum quality standards met" >> quality-gate-report.md
        else
          echo "üî¥ **INSUFFICIENT** - Quality standards not met" >> quality-gate-report.md
        fi

    - name: Upload quality gate report
      uses: actions/upload-artifact@v4
      with:
        name: quality-gate-report
        path: quality-gate-report.md

    - name: Comment quality report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality-gate-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üéØ Quality Gate Report\n\n${report}`
          });

    - name: Enforce quality gate threshold
      run: |
        SCORE=${{ steps.quality-score.outputs.score }}
        THRESHOLD=70
        
        echo "Quality Gate Enforcement:"
        echo "- Score: $SCORE/100"
        echo "- Threshold: $THRESHOLD/100"
        
        if [ $SCORE -ge $THRESHOLD ]; then
          echo "‚úÖ Quality gates PASSED - Score meets threshold"
        else
          echo "‚ùå Quality gates FAILED - Score below threshold"
          echo ""
          echo "Required actions:"
          echo "- Fix mandatory quality gate failures"
          echo "- Improve test coverage if below 70%"
          echo "- Address security audit findings"
          echo "- Ensure all tests pass"
          exit 1
        fi

    - name: Set commit status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const score = '${{ steps.quality-score.outputs.score }}';
          const state = score >= 70 ? 'success' : 'failure';
          const description = `Quality Score: ${score}/100`;
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            description: description,
            context: 'Quality Gates'
          });