name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUST_LOG: debug

# Workflow-level concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 1. CODE QUALITY & FORMATTING
  code-quality:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy, rust-docs

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-quality-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-quality-
          ${{ runner.os }}-cargo-

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy with strict settings
      run: |
        cargo clippy --all-targets --all-features -- \
          -D warnings \
          -D clippy::all \
          -D clippy::pedantic \
          -A clippy::uninlined-format-args \
          -A clippy::derivable-impls \
          -A clippy::if-same-then-else \
          -A clippy::needless-question-mark \
          -A clippy::needless-return \
          -A clippy::module-name-repetitions \
          -A clippy::too-many-lines

    - name: Check documentation
      run: |
        cargo doc --lib --no-deps --document-private-items
        # Check for missing documentation
        cargo doc --lib --no-deps --document-private-items 2>&1 | \
          grep -E "warning.*missing documentation" && exit 1 || exit 0

    - name: Validate Cargo.toml
      run: cargo check --locked

  # 2. BUILD MATRIX TESTING
  build-matrix:
    name: Build Matrix Testing
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: code-quality
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, 1.75.0]  # MSRV and latest versions
        features: 
          - default
          - minimal
          - full
        exclude:
          # Reduce matrix size for efficiency
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta
          - os: macos-latest
            features: minimal
          - os: windows-latest
            features: minimal

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build with ${{ matrix.features }} features
      run: |
        case "${{ matrix.features }}" in
          "minimal")
            cargo build --no-default-features --lib
            ;;
          "full")
            cargo build --all-features --lib
            ;;
          *)
            cargo build --lib
            ;;
        esac

    - name: Run tests with ${{ matrix.features }} features
      run: |
        case "${{ matrix.features }}" in
          "minimal")
            cargo test --no-default-features --lib
            ;;
          "full")
            cargo test --all-features --lib
            ;;
          *)
            cargo test --lib
            ;;
        esac

  # 3. COMPREHENSIVE UNIT TESTING
  unit-tests:
    name: Unit Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: code-quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Run unit tests with output
      run: |
        cargo test --lib --verbose -- --nocapture --test-threads=1

    - name: Run doc tests
      run: cargo test --doc

    - name: Test examples
      run: |
        # Test that examples compile
        find examples -name "Cargo.toml" -exec dirname {} \; | while read dir; do
          echo "Testing example in $dir"
          cd "$dir" && cargo check && cd -
        done || echo "No examples found"

  # 4. INTEGRATION & DATABASE TESTING
  integration-tests:
    name: Integration & Database Tests
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: code-quality

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgresql:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: auth_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}

    - name: Wait for services
      run: |
        echo "Waiting for services to be ready..."
        timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        timeout 60 bash -c 'until mongosh --host localhost:27017 --username admin --password password --eval "db.adminCommand(\"ping\")" --quiet; do sleep 1; done'

    - name: Set up test databases
      run: |
        # Set up PostgreSQL
        PGPASSWORD=password psql -h localhost -U postgres -d auth_test -c "SELECT 1;"
        
        # Set up MongoDB
        mongosh --host localhost:27017 --username admin --password password --eval "
          use auth_test;
          db.createCollection('users');
          db.createCollection('sessions');
        "

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/auth_test
        MONGODB_URL: mongodb://admin:password@localhost:27017/auth_test?authSource=admin
        REDIS_URL: redis://localhost:6379
        RUST_LOG: debug
      run: |
        cargo test --test integration --verbose -- --nocapture --test-threads=1

    - name: Run database-specific tests
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/auth_test
        MONGODB_URL: mongodb://admin:password@localhost:27017/auth_test?authSource=admin
        REDIS_URL: redis://localhost:6379
      run: |
        # Test MongoDB adapter
        cargo test --test mongodb_tests --verbose -- --nocapture
        
        # Test PostgreSQL adapter
        cargo test --test postgresql_tests --verbose -- --nocapture
        
        # Test cross-database functionality
        cargo test --test cross_database_tests --verbose -- --nocapture

  # 5. PERFORMANCE & LOAD TESTING
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: unit-tests
    if: github.event_name == 'push' || github.event_name == 'schedule'

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install performance tools
      run: |
        # Install criterion for benchmarking
        sudo apt-get update
        sudo apt-get install -y hyperfine

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-perf-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmark tests
      run: |
        cargo test --test performance_tests --verbose --release

    - name: Run load tests
      env:
        DATABASE_URL: mongodb://admin:password@localhost:27017/auth_test?authSource=admin
        REDIS_URL: redis://localhost:6379
      run: |
        cargo test --test load_tests --verbose --release

    - name: Performance regression check
      run: |
        # Build optimized binary
        cargo build --release --bin rust-auth-service
        
        # Run performance benchmarks
        echo "Running performance benchmarks..."
        # Add specific performance tests here

  # 6. SECURITY SCANNING & COMPLIANCE
  security-scan:
    name: Security Scanning & Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}

    - name: Install security tools
      run: |
        cargo install cargo-audit cargo-deny

    - name: Run cargo audit
      run: |
        cargo audit --ignore RUSTSEC-2023-0071

    - name: Run cargo deny
      run: |
        cargo deny check

    - name: Run SAST with Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/rust
          p/secrets
        generateSarif: true

    - name: Upload SARIF to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

    - name: Secret scanning
      uses: trufflesecurity/trufflehog@v3.77.0
      with:
        path: ./
        base: main
        head: HEAD

    - name: License compliance check
      run: |
        cargo deny check licenses

  # 7. TEST COVERAGE ANALYSIS
  coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [unit-tests, integration-tests]

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}

    - name: Run comprehensive coverage analysis
      env:
        DATABASE_URL: mongodb://admin:password@localhost:27017/auth_test?authSource=admin
        REDIS_URL: redis://localhost:6379
      run: |
        cargo tarpaulin \
          --lib \
          --tests \
          --timeout 180 \
          --out Html,Xml,Json \
          --output-dir coverage \
          --exclude-files "src/main.rs" \
          --exclude-files "src/bin/*" \
          --fail-under 70

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/cobertura.xml
        flags: comprehensive-ci
        name: comprehensive-ci-coverage

    - name: Archive coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-comprehensive
        path: coverage/

  # 8. DOCKER & CONTAINER SECURITY
  docker-security:
    name: Docker & Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security-scan
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t rust-auth-service:test -f docker/auth-service/Dockerfile .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'rust-auth-service:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run container security scan
      run: |
        # Additional container security checks
        docker run --rm -i hadolint/hadolint < docker/auth-service/Dockerfile

  # 9. DEPLOYMENT READINESS CHECK
  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-matrix, integration-tests, security-scan, coverage]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build release binary
      run: |
        cargo build --release --bin rust-auth-service

    - name: Test configuration loading
      run: |
        # Test configuration with example files
        cp config.yml.example config.yml
        ./target/release/rust-auth-service --help

    - name: Validate Kubernetes manifests
      run: |
        # Install kubeval
        curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar -xz
        sudo mv kubeval /usr/local/bin
        
        # Validate K8s manifests
        for file in k8s/*.yaml; do
          kubeval "$file"
        done

    - name: Check Helm chart
      run: |
        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        
        # Validate Helm chart
        helm lint helm/auth-service/

  # 10. QUALITY GATES & REPORTING
  quality-gates:
    name: Quality Gates & Final Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-matrix, integration-tests, performance-tests, security-scan, coverage, docker-security]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate quality report
      run: |
        echo "# CI/CD Quality Report" > quality-report.md
        echo "Generated: $(date)" >> quality-report.md
        echo "" >> quality-report.md
        
        echo "## Job Status Summary" >> quality-report.md
        echo "- Build Matrix: ${{ needs.build-matrix.result }}" >> quality-report.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> quality-report.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> quality-report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> quality-report.md
        echo "- Coverage: ${{ needs.coverage.result }}" >> quality-report.md
        echo "- Docker Security: ${{ needs.docker-security.result }}" >> quality-report.md
        
        echo "" >> quality-report.md
        echo "## Quality Gate Status" >> quality-report.md
        
        # Determine overall status
        OVERALL_STATUS="PASSED"
        
        if [[ "${{ needs.build-matrix.result }}" == "failure" || 
              "${{ needs.integration-tests.result }}" == "failure" || 
              "${{ needs.security-scan.result }}" == "failure" || 
              "${{ needs.coverage.result }}" == "failure" ]]; then
          OVERALL_STATUS="FAILED"
        fi
        
        echo "**Overall Status: $OVERALL_STATUS**" >> quality-report.md

    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report
        path: quality-report.md

    - name: Comment on PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔍 CI/CD Quality Report\n\n${report}`
          });

    - name: Fail workflow if quality gates not met
      if: >
        needs.build-matrix.result == 'failure' ||
        needs.integration-tests.result == 'failure' ||
        needs.security-scan.result == 'failure' ||
        needs.coverage.result == 'failure'
      run: |
        echo "❌ Quality gates not met. Failing the workflow."
        exit 1