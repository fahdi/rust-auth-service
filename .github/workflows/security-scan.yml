name: Security Scanning & Analysis

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 4 AM UTC
    - cron: '0 4 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # STATIC APPLICATION SECURITY TESTING (SAST)
  sast-analysis:
    name: SAST Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Run Semgrep SAST
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/rust
          p/secrets
          p/dockerfile
          p/kubernetes
        generateSarif: true

    - name: Upload SARIF to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: cpp  # Rust is analyzed as C++ by CodeQL

    - name: Build for CodeQL
      run: cargo build --lib

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # DEPENDENCY VULNERABILITY SCANNING
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}

    - name: Install security scanning tools
      run: |
        cargo install cargo-audit cargo-deny

    - name: Run cargo audit
      run: |
        cargo audit --json > audit-results.json
        cat audit-results.json
        
        # Check for high/critical vulnerabilities
        if cargo audit --ignore RUSTSEC-2023-0071 | grep -E "(high|critical)"; then
          echo "❌ High or critical vulnerabilities found!"
          exit 1
        fi

    - name: Run cargo deny
      run: |
        cargo deny check all

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: audit-results.json

  # SECRET SCANNING
  secret-scan:
    name: Secret & Credential Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog secret scan
      uses: trufflesecurity/trufflehog@v3.77.0
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks secret scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Scan for additional secrets
      run: |
        # Check for common secret patterns in non-tracked files
        echo "Scanning for additional secret patterns..."
        
        # Check environment files
        find . -name "*.env*" -not -path "./target/*" | while read file; do
          if [ -f "$file" ]; then
            echo "Checking $file for secrets..."
            grep -E "(password|secret|key|token).*=" "$file" && echo "⚠️  Potential secrets in $file"
          fi
        done
        
        # Check configuration files
        find . -name "*.yml" -o -name "*.yaml" -o -name "*.json" | grep -v target | while read file; do
          if grep -qE "(password|secret|key|token).*:" "$file"; then
            echo "⚠️  Potential secrets in $file"
          fi
        done

  # LICENSE COMPLIANCE
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Check license compliance
      run: |
        cargo deny check licenses

    - name: Generate license report
      run: |
        echo "# License Compliance Report" > license-report.md
        echo "Generated: $(date)" >> license-report.md
        echo "" >> license-report.md
        
        echo "## Allowed Licenses" >> license-report.md
        cargo deny list --format human licenses | grep -A 100 "Allowed licenses:" >> license-report.md
        
        echo "## Dependencies by License" >> license-report.md
        cargo deny list --format human | grep -E "^(MIT|Apache|BSD)" >> license-report.md

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance-report
        path: license-report.md

  # CONTAINER SECURITY SCANNING
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      run: |
        docker build -t auth-service-security-scan:latest -f docker/auth-service/Dockerfile .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'auth-service-security-scan:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: 'auth-service-security-scan:latest'
        fail-build: false
        severity-cutoff: high

    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security

    - name: Dockerfile security scan
      run: |
        # Install hadolint
        wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        chmod +x hadolint
        sudo mv hadolint /usr/local/bin/
        
        # Scan Dockerfile
        hadolint docker/auth-service/Dockerfile

  # INFRASTRUCTURE SECURITY
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Scan Kubernetes manifests
      run: |
        # Install kubesec
        wget https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz
        tar -xzf kubesec_linux_amd64.tar.gz
        sudo mv kubesec /usr/local/bin/
        
        # Scan K8s manifests
        for file in k8s/*.yaml; do
          if [ -f "$file" ]; then
            echo "Scanning $file"
            kubesec scan "$file"
          fi
        done

    - name: Scan Helm charts
      run: |
        # Install checkov for Helm scanning
        pip install checkov
        
        # Scan Helm charts
        checkov -d helm/ --framework helm

    - name: Docker Compose security scan
      run: |
        # Scan Docker Compose files
        for file in docker/compose/*.yml; do
          if [ -f "$file" ]; then
            echo "Scanning Docker Compose file: $file"
            checkov -f "$file" --framework docker_compose
          fi
        done

  # SECURITY POLICY VALIDATION
  security-policy:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate security policies
      run: |
        echo "# Security Policy Validation Report" > security-policy-report.md
        echo "Generated: $(date)" >> security-policy-report.md
        echo "" >> security-policy-report.md
        
        # Check for security documentation
        if [ -f "SECURITY.md" ]; then
          echo "✅ Security policy found" >> security-policy-report.md
        else
          echo "❌ Security policy missing" >> security-policy-report.md
        fi
        
        # Check for vulnerability disclosure
        if grep -q "vulnerability" SECURITY.md 2>/dev/null; then
          echo "✅ Vulnerability disclosure process documented" >> security-policy-report.md
        else
          echo "❌ Vulnerability disclosure process not documented" >> security-policy-report.md
        fi
        
        # Check for security configuration
        if [ -f "deny.toml" ]; then
          echo "✅ Dependency security configuration found" >> security-policy-report.md
        else
          echo "❌ Dependency security configuration missing" >> security-policy-report.md
        fi

    - name: Upload security policy report
      uses: actions/upload-artifact@v4
      with:
        name: security-policy-report
        path: security-policy-report.md

  # SECURITY MONITORING SETUP
  security-monitoring:
    name: Security Monitoring Setup
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scan, secret-scan, container-security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Configure security monitoring
      run: |
        echo "Setting up security monitoring..."
        # Configure security monitoring and alerting
        
    - name: Security metrics collection
      run: |
        echo "Collecting security metrics..."
        # Collect and aggregate security scan results

  # SECURITY REPORT GENERATION
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scan, secret-scan, license-compliance, container-security, infrastructure-security]
    if: always()

    steps:
    - name: Download all security artifacts
      uses: actions/download-artifact@v4

    - name: Generate comprehensive security report
      run: |
        echo "# Comprehensive Security Report" > security-report.md
        echo "Generated: $(date)" >> security-report.md
        echo "Repository: ${{ github.repository }}" >> security-report.md
        echo "Commit: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Security Scan Results" >> security-report.md
        echo "| Scan Type | Status | Details |" >> security-report.md
        echo "|-----------|--------|---------|" >> security-report.md
        echo "| SAST Analysis | ${{ needs.sast-analysis.result }} | Static application security testing |" >> security-report.md
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} | Vulnerability scanning of dependencies |" >> security-report.md
        echo "| Secret Scan | ${{ needs.secret-scan.result }} | Credential and secret detection |" >> security-report.md
        echo "| License Compliance | ${{ needs.license-compliance.result }} | License compliance verification |" >> security-report.md
        echo "| Container Security | ${{ needs.container-security.result }} | Container image vulnerability scanning |" >> security-report.md
        echo "| Infrastructure Security | ${{ needs.infrastructure-security.result }} | Infrastructure configuration scanning |" >> security-report.md
        
        echo "" >> security-report.md
        echo "## Security Score" >> security-report.md
        
        # Calculate security score
        PASSED=0
        TOTAL=6
        
        [[ "${{ needs.sast-analysis.result }}" == "success" ]] && PASSED=$((PASSED + 1))
        [[ "${{ needs.dependency-scan.result }}" == "success" ]] && PASSED=$((PASSED + 1))
        [[ "${{ needs.secret-scan.result }}" == "success" ]] && PASSED=$((PASSED + 1))
        [[ "${{ needs.license-compliance.result }}" == "success" ]] && PASSED=$((PASSED + 1))
        [[ "${{ needs.container-security.result }}" == "success" ]] && PASSED=$((PASSED + 1))
        [[ "${{ needs.infrastructure-security.result }}" == "success" ]] && PASSED=$((PASSED + 1))
        
        SCORE=$((PASSED * 100 / TOTAL))
        echo "**Security Score: ${SCORE}% (${PASSED}/${TOTAL} checks passed)**" >> security-report.md
        
        if [ $SCORE -ge 90 ]; then
          echo "🟢 **Security Status: EXCELLENT**" >> security-report.md
        elif [ $SCORE -ge 75 ]; then
          echo "🟡 **Security Status: GOOD**" >> security-report.md
        elif [ $SCORE -ge 50 ]; then
          echo "🟠 **Security Status: NEEDS IMPROVEMENT**" >> security-report.md
        else
          echo "🔴 **Security Status: CRITICAL ISSUES**" >> security-report.md
        fi

    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-security-report
        path: security-report.md

    - name: Comment security report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Analysis Report\n\n${report}`
          });

    - name: Fail workflow on critical security issues
      if: >
        needs.sast-analysis.result == 'failure' ||
        needs.dependency-scan.result == 'failure' ||
        needs.secret-scan.result == 'failure'
      run: |
        echo "❌ Critical security issues detected. Failing the workflow."
        exit 1