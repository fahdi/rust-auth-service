name: Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (tag or commit)'
        required: false
        default: 'latest'

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # BUILD & PACKAGE
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: rust-auth-service-linux-x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact: rust-auth-service-linux-musl-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: rust-auth-service-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: rust-auth-service-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Install additional dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get update
          sudo apt-get install -y musl-tools
        fi

    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }} --bin rust-auth-service

    - name: Package binary
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ${{ matrix.artifact }}.tar.gz rust-auth-service
        
    - name: Generate checksums
      run: |
        cd target/${{ matrix.target }}/release
        sha256sum ${{ matrix.artifact }}.tar.gz > ${{ matrix.artifact }}.tar.gz.sha256

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          target/${{ matrix.target }}/release/${{ matrix.artifact }}.tar.gz
          target/${{ matrix.target }}/release/${{ matrix.artifact }}.tar.gz.sha256

  # DOCKER BUILD & PUSH
  build-docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: build-artifacts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: rust-auth-service-linux-musl-x64
        path: ./artifacts

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/auth-service/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action@v0.15.10
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # SECURITY SCANNING
  security-scan:
    name: Security Scan Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-docker

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        fail-build: false

  # STAGING DEPLOYMENT
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://auth-staging.yourdomain.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3

    - name: Set up Helm
      uses: azure/setup-helm@v3

    - name: Deploy to Kubernetes (staging)
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_STAGING }}
        NAMESPACE: auth-staging
      run: |
        echo "$KUBE_CONFIG_DATA" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Create namespace if it doesn't exist
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy using Helm
        helm upgrade --install auth-service ./helm/auth-service \
          --namespace $NAMESPACE \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --set ingress.hosts[0].host=auth-staging.yourdomain.com \
          --wait --timeout=10m

    - name: Run health checks
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Check if the service is responding
        curl -f https://auth-staging.yourdomain.com/health || exit 1

    - name: Run smoke tests
      run: |
        # Run basic smoke tests against staging
        echo "Running staging smoke tests..."
        # Add your smoke test commands here

  # PRODUCTION DEPLOYMENT
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-docker, security-scan]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://auth.yourdomain.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3

    - name: Set up Helm
      uses: azure/setup-helm@v3

    - name: Pre-deployment backup
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        NAMESPACE: auth-production
      run: |
        echo "$KUBE_CONFIG_DATA" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Create database backup before deployment
        kubectl exec -n $NAMESPACE deployment/auth-service -- \
          ./scripts/backup-database.sh

    - name: Deploy to Kubernetes (production)
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        NAMESPACE: auth-production
      run: |
        echo "$KUBE_CONFIG_DATA" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Blue-green deployment strategy
        helm upgrade --install auth-service ./helm/auth-service \
          --namespace $NAMESPACE \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --set replicaCount=3 \
          --set resources.limits.cpu=1000m \
          --set resources.limits.memory=1Gi \
          --set ingress.hosts[0].host=auth.yourdomain.com \
          --wait --timeout=15m

    - name: Run database migrations
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        NAMESPACE: auth-production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Run database migrations
        kubectl exec -n $NAMESPACE deployment/auth-service -- \
          ./target/release/migrate up

    - name: Health checks and monitoring
      run: |
        # Wait for deployment to stabilize
        sleep 60
        
        # Comprehensive health checks
        curl -f https://auth.yourdomain.com/health
        curl -f https://auth.yourdomain.com/metrics
        
        # Check critical endpoints
        curl -f https://auth.yourdomain.com/auth/login

    - name: Post-deployment tests
      run: |
        echo "Running production smoke tests..."
        # Add production-specific smoke tests
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'ðŸš€ Production deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ROLLBACK CAPABILITY
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: failure() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    needs: [deploy-staging, deploy-production]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3

    - name: Set up Helm
      uses: azure/setup-helm@v3

    - name: Rollback production deployment
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        NAMESPACE: auth-production
      run: |
        echo "$KUBE_CONFIG_DATA" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Rollback to previous release
        helm rollback auth-service -n $NAMESPACE
        
        # Wait for rollback to complete
        kubectl rollout status deployment/auth-service -n $NAMESPACE

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: 'ðŸ”„ Production deployment rolled back due to failure!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # RELEASE MANAGEMENT
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-artifacts, deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate release notes
      id: release_notes
      run: |
        # Generate changelog from git commits
        echo "## What's Changed" > release_notes.md
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
        echo "" >> release_notes.md
        echo "## Docker Images" >> release_notes.md
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_REF#refs/tags/}\`" >> release_notes.md

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "*/*.tar.gz,*/*.sha256"
        bodyFile: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # MONITORING & ALERTING
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Setup monitoring alerts
      run: |
        echo "Setting up post-deployment monitoring..."
        # Configure additional monitoring and alerting
        
    - name: Performance baseline check
      run: |
        echo "Running performance baseline checks..."
        # Add performance monitoring setup