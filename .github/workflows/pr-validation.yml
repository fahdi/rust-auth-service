name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

# Cancel previous runs on new pushes to the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # QUICK VALIDATION - Fast feedback for developers
  quick-validation:
    name: Quick PR Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-pr-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-pr-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: |
        if ! cargo fmt --all -- --check; then
          echo "❌ Code formatting issues found!"
          echo "Run 'cargo fmt' to fix formatting."
          exit 1
        fi

    - name: Quick lint check
      run: |
        cargo clippy --lib -- \
          -D warnings \
          -A clippy::uninlined-format-args \
          -A clippy::derivable-impls

    - name: Quick build check
      run: cargo check --lib

    - name: Fast unit tests
      run: |
        # Run only tests that don't require external services
        cargo test --lib --verbose -- \
          --skip mongodb \
          --skip redis \
          --skip postgresql \
          --skip integration

  # COMPREHENSIVE PR TESTING - Detailed validation
  comprehensive-pr-test:
    name: Comprehensive PR Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: quick-validation
    if: github.event.pull_request.draft == false

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-comprehensive-${{ hashFiles('**/Cargo.lock') }}

    - name: Wait for services
      run: |
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        timeout 30 bash -c 'until mongosh --host localhost:27017 --username admin --password password --eval "db.adminCommand(\"ping\")" --quiet; do sleep 1; done'

    - name: Run all unit tests
      run: cargo test --lib --verbose

    - name: Run integration tests
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/auth_test?authSource=admin
        REDIS_URL: redis://localhost:6379
      run: |
        cargo test --test "*" --verbose -- --test-threads=1

    - name: Security audit
      run: |
        cargo install cargo-audit || true
        cargo audit --ignore RUSTSEC-2023-0071

  # COVERAGE VALIDATION - Ensure code coverage standards
  pr-coverage:
    name: PR Coverage Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quick-validation
    if: github.event.pull_request.draft == false

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-coverage-pr-${{ hashFiles('**/Cargo.lock') }}

    - name: Run coverage analysis
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/auth_test?authSource=admin
        REDIS_URL: redis://localhost:6379
      run: |
        cargo tarpaulin \
          --lib \
          --timeout 120 \
          --out Xml,Html \
          --output-dir coverage \
          --exclude-files "src/main.rs" \
          --exclude-files "src/bin/*" \
          --fail-under 60  # Lower threshold for PRs

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/cobertura.xml
        flags: pr-validation
        name: pr-coverage

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(grep -o 'line-rate="[0-9.]*"' coverage/cobertura.xml | head -1 | grep -o '[0-9.]*' | awk '{print $1 * 100}')
        echo "coverage_percent=${COVERAGE}" >> $GITHUB_OUTPUT

    - name: Comment coverage on PR
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage_percent }}';
          const threshold = 60;
          const status = coverage >= threshold ? '✅' : '❌';
          const message = `## 📊 Test Coverage Report
          
          ${status} **Coverage**: ${coverage}%
          **Threshold**: ${threshold}%
          
          ${coverage >= threshold ? 
            '✅ Coverage meets minimum requirements!' : 
            '❌ Coverage below minimum threshold. Please add tests.'}
          
          [View detailed coverage report](https://app.codecov.io/gh/${{ github.repository }}/pull/${{ github.event.number }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });

  # SECURITY VALIDATION - Security checks for PRs
  pr-security:
    name: PR Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-validation

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install security tools
      run: |
        cargo install cargo-audit cargo-deny

    - name: Run dependency audit
      run: |
        cargo audit --ignore RUSTSEC-2023-0071

    - name: Check license compliance
      run: |
        cargo deny check licenses

    - name: Secret scanning
      uses: trufflesecurity/trufflehog@v3.77.0
      with:
        path: ./
        base: ${{ github.event.pull_request.base.sha }}
        head: HEAD

    - name: SAST scanning with Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/rust
          p/secrets

  # FINAL PR STATUS - Aggregate results
  pr-status:
    name: PR Validation Status
    runs-on: ubuntu-latest
    needs: [quick-validation, comprehensive-pr-test, pr-coverage, pr-security]
    if: always()

    steps:
    - name: Check all job results
      run: |
        echo "Job Results:"
        echo "Quick Validation: ${{ needs.quick-validation.result }}"
        echo "Comprehensive Test: ${{ needs.comprehensive-pr-test.result }}"
        echo "Coverage: ${{ needs.pr-coverage.result }}"
        echo "Security: ${{ needs.pr-security.result }}"
        
        # Determine overall status
        if [[ "${{ needs.quick-validation.result }}" == "success" && 
              "${{ needs.comprehensive-pr-test.result }}" == "success" && 
              "${{ needs.pr-coverage.result }}" == "success" && 
              "${{ needs.pr-security.result }}" == "success" ]]; then
          echo "✅ All PR validation checks passed!"
          exit 0
        else
          echo "❌ Some PR validation checks failed!"
          exit 1
        fi

    - name: Update PR status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const { needs } = context.payload.workflow_run || { needs: ${{ toJson(needs) }} };
          const allPassed = Object.values(needs).every(job => job.result === 'success');
          
          const status = allPassed ? 'success' : 'failure';
          const description = allPassed ? 
            'All PR validation checks passed' : 
            'Some PR validation checks failed';
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: status,
            description: description,
            context: 'PR Validation'
          });

  # DRAFT PR CHECKS - Limited checks for draft PRs
  draft-pr-check:
    name: Draft PR Quick Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.pull_request.draft == true

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Basic lint check
      run: cargo clippy --lib -- -D warnings -A clippy::uninlined-format-args

    - name: Build check
      run: cargo check --lib

    - name: Comment on draft PR
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 📝 Draft PR Status
            
            ✅ Basic validation completed for draft PR!
            
            **Completed Checks:**
            - Code formatting
            - Basic linting
            - Build verification
            
            **When ready:**
            1. Mark PR as "Ready for review" to trigger full validation
            2. Ensure all tests pass and coverage meets requirements
            3. Address any security scan findings
            `
          });