name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, milestone-4-advanced-auth ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for dependency and security scanning
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code Quality and Compilation Checks
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable, beta]
        include:
          - rust-version: stable
            can-fail: false
          - rust-version: beta
            can-fail: true
    continue-on-error: ${{ matrix.can-fail }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust-version }}-
          ${{ runner.os }}-cargo-

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy linting
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check compilation (all features)
      run: cargo check --all-targets --all-features

    - name: Check compilation (no default features)
      run: cargo check --all-targets --no-default-features

    - name: Check compilation (secure build)
      run: cargo check --all-targets --features secure

    - name: Check compilation (ultra-secure build)
      run: cargo check --all-targets --features ultra-secure

    - name: Check documentation
      run: cargo doc --all-features --no-deps

  # Security and Dependency Auditing
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Run dependency analysis
      run: cargo deny check

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features: ['default', 'secure', 'ultra-secure']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Run unit tests (default features)
      if: matrix.features == 'default'
      run: cargo test --lib --bins

    - name: Run unit tests (secure build)
      if: matrix.features == 'secure'
      run: cargo test --lib --bins --features secure

    - name: Run unit tests (ultra-secure build)
      if: matrix.features == 'ultra-secure'
      run: cargo test --lib --bins --features ultra-secure

  # Integration Tests with Database Services
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: ['auth-flow', 'database-adapters', 'cache', 'performance', 'security']
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: auth_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: auth_test
          MYSQL_ROOT_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      MONGODB_TEST_URL: mongodb://localhost:27017/auth_test
      POSTGRESQL_TEST_URL: postgresql://postgres:test_password@localhost:5432/auth_test
      MYSQL_TEST_URL: mysql://root:test_password@localhost:3306/auth_test
      REDIS_TEST_URL: redis://localhost:6379
      RUST_LOG: info

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}

    - name: Wait for database services
      run: |
        # Wait for MongoDB
        timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" >/dev/null 2>&1; do sleep 2; done'
        
        # Wait for PostgreSQL
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 >/dev/null 2>&1; do sleep 2; done'
        
        # Wait for MySQL
        timeout 60 bash -c 'until mysqladmin ping -h localhost -P 3306 --silent >/dev/null 2>&1; do sleep 2; done'
        
        # Wait for Redis
        timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; do sleep 2; done'

    - name: Run authentication flow integration tests
      if: matrix.test-suite == 'auth-flow'
      run: cargo test --test simple_auth_integration --features integration-tests

    - name: Run database adapter integration tests
      if: matrix.test-suite == 'database-adapters'
      run: cargo test --test database_adapters_integration --features "mongodb,postgresql,mysql"

    - name: Run cache integration tests
      if: matrix.test-suite == 'cache'
      run: cargo test --test cache_integration --features "mongodb,postgresql,mysql"

    - name: Run performance integration tests
      if: matrix.test-suite == 'performance'
      run: cargo test --test performance_load_testing --features "mongodb,postgresql,mysql"

    - name: Start auth service for security tests
      if: matrix.test-suite == 'security'
      run: |
        # Build and start the auth service in background
        cargo build --release
        ./target/release/rust-auth-service &
        AUTH_PID=$!
        echo "AUTH_PID=$AUTH_PID" >> $GITHUB_ENV
        
        # Wait for service to be ready
        timeout 30 bash -c 'until curl -f http://localhost:8090/health >/dev/null 2>&1; do sleep 2; done'

    - name: Run security integration tests
      if: matrix.test-suite == 'security'
      run: cargo test --test security_integration --features integration-tests

    - name: Stop auth service
      if: matrix.test-suite == 'security' && env.AUTH_PID
      run: kill $AUTH_PID || true

  # Performance Benchmarking and Regression Detection
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017

      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: auth_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432

      redis:
        image: redis:7.2
        ports:
          - 6379:6379

    env:
      MONGODB_TEST_URL: mongodb://localhost:27017/auth_test
      POSTGRESQL_TEST_URL: postgresql://postgres:test_password@localhost:5432/auth_test
      REDIS_TEST_URL: redis://localhost:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-benchmark-${{ hashFiles('**/Cargo.lock') }}

    - name: Wait for database services
      run: |
        timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" >/dev/null 2>&1; do sleep 2; done'
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 >/dev/null 2>&1; do sleep 2; done'
        timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; do sleep 2; done'

    - name: Run performance regression baseline
      run: cargo test --test performance_load_testing test_performance_regression_baseline --features "mongodb,postgresql,mysql"

    - name: Store performance results
      run: |
        mkdir -p performance-results
        echo "Performance baseline run completed at $(date)" > performance-results/baseline-$(date +%Y%m%d-%H%M%S).txt

    - name: Upload performance artifacts
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results/

  # Build and Test Docker Image
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: rust-auth-service:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Start the container
        docker run -d --name auth-test -p 8090:8090 rust-auth-service:test
        
        # Wait for service to be ready
        timeout 30 bash -c 'until curl -f http://localhost:8090/health >/dev/null 2>&1; do sleep 2; done'
        
        # Test health endpoint
        curl -f http://localhost:8090/health
        
        # Stop container
        docker stop auth-test

  # Test Results Aggregation and Reporting
  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, security-audit, unit-tests, integration-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate test summary
      run: |
        echo "# CI/CD Test Results Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Build Information" >> test-summary.md
        echo "- **Commit:** ${{ github.sha }}" >> test-summary.md
        echo "- **Branch:** ${{ github.ref_name }}" >> test-summary.md
        echo "- **Trigger:** ${{ github.event_name }}" >> test-summary.md
        echo "- **Timestamp:** $(date -u)" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "## Test Job Results" >> test-summary.md
        echo "- **Quality Checks:** ${{ needs.quality-checks.result }}" >> test-summary.md
        echo "- **Security Audit:** ${{ needs.security-audit.result }}" >> test-summary.md
        echo "- **Unit Tests:** ${{ needs.unit-tests.result }}" >> test-summary.md
        echo "- **Integration Tests:** ${{ needs.integration-tests.result }}" >> test-summary.md
        
        echo "" >> test-summary.md
        echo "## Next Steps" >> test-summary.md
        if [[ "${{ needs.quality-checks.result }}" == "success" && "${{ needs.security-audit.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ All tests passed! Ready for deployment." >> test-summary.md
        else
          echo "❌ Some tests failed. Review the job logs above." >> test-summary.md
        fi

    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md

    - name: Comment test results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, security-audit, unit-tests, integration-tests, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner != 'dependabot[bot]'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Simulate deployment
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Deployment simulation completed"
        echo "📊 Service health check passed"
        echo "🔗 Staging URL: https://staging.auth-service.example.com"

    - name: Notify deployment status
      run: |
        echo "Deployment Status: SUCCESS"
        echo "Environment: Staging"
        echo "Commit: ${{ github.sha }}"
        echo "Timestamp: $(date -u)"