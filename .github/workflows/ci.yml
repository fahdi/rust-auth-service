name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug

jobs:
  # Code Quality and Static Analysis
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-quality-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-quality-
          
    - name: Check code formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy lints
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Check for unused dependencies
      run: |
        cargo install cargo-machete
        cargo machete

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          
    - name: Run unit tests
      run: cargo test --lib --verbose
      
    - name: Run doc tests
      run: cargo test --doc --verbose

  # Integration Tests with Services
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: auth_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-integration-
          
    - name: Install test dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
    - name: Wait for services to be ready
      run: |
        timeout 60s bash -c 'until nc -z localhost 27017; do sleep 1; done'
        timeout 60s bash -c 'until nc -z localhost 5432; do sleep 1; done'
        timeout 60s bash -c 'until nc -z localhost 6379; do sleep 1; done'
        
    - name: Set up test environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/auth_test" >> $GITHUB_ENV
        echo "MONGODB_URL=mongodb://admin:password@localhost:27017/auth_test?authSource=admin" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key-for-ci-testing" >> $GITHUB_ENV
        echo "TEST_MODE=true" >> $GITHUB_ENV
        
    - name: Run database setup
      run: |
        # PostgreSQL setup
        PGPASSWORD=postgres psql -h localhost -U postgres -d auth_test -c "SELECT 1;"
        
        # MongoDB setup (verify connection)
        mongosh "mongodb://admin:password@localhost:27017/auth_test?authSource=admin" --eval "db.runCommand('ping')"
        
    - name: Build all targets
      run: cargo build --all-targets --verbose
      
    - name: Run integration tests
      run: cargo test --test integration_tests --verbose --features integration-tests
      
    - name: Run cache integration tests
      run: |
        cargo test cache_memory --verbose --features integration-tests
        cargo test cache_redis --verbose --features integration-tests
        cargo test cache_multilevel --verbose --features integration-tests
        cargo test cache_invalidation --verbose --features integration-tests

  # Performance and Load Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: auth_perf
        ports:
          - 27017:27017
          
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_perf
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-performance-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-performance-
          
    - name: Install performance testing tools
      run: |
        npm install -g artillery@latest
        cargo install cargo-criterion
        
    - name: Set up performance test environment
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/auth_perf" >> $GITHUB_ENV
        echo "MONGODB_URL=mongodb://admin:password@localhost:27017/auth_perf?authSource=admin" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "JWT_SECRET=perf-test-secret-key" >> $GITHUB_ENV
        echo "PERFORMANCE_TEST=true" >> $GITHUB_ENV
        
    - name: Build release version for performance testing
      run: cargo build --release --verbose
      
    - name: Start auth service for load testing
      run: |
        ./target/release/rust-auth-service &
        AUTH_PID=$!
        echo "AUTH_SERVICE_PID=$AUTH_PID" >> $GITHUB_ENV
        sleep 10  # Wait for service to start
        
    - name: Run performance benchmarks
      run: cargo test --release --test performance_tests --verbose --features load-tests
      
    - name: Run load tests with Artillery
      run: |
        if [ -f "tests/load/auth_load_test.yml" ]; then
          artillery run tests/load/auth_load_test.yml
        else
          echo "Load test configuration not found, skipping Artillery tests"
        fi
        
    - name: Stop auth service
      run: |
        if [ ! -z "$AUTH_SERVICE_PID" ]; then
          kill $AUTH_SERVICE_PID || true
        fi

  # Security Testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-security-
          
    - name: Install security audit tools
      run: |
        cargo install cargo-audit
        cargo install cargo-deny
        
    - name: Run security audit
      run: cargo audit --ignore RUSTSEC-2023-0071
      
    - name: Run dependency checks
      run: cargo deny check
      
    - name: Check for hardcoded secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # Test Coverage
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: auth_coverage
        ports:
          - 27017:27017
          
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_coverage
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-
          
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Set up coverage environment
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/auth_coverage" >> $GITHUB_ENV
        echo "MONGODB_URL=mongodb://admin:password@localhost:27017/auth_coverage?authSource=admin" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "JWT_SECRET=coverage-test-secret" >> $GITHUB_ENV
        echo "TEST_MODE=true" >> $GITHUB_ENV
        
    - name: Generate test coverage
      run: |
        cargo tarpaulin --verbose \
          --all-features \
          --workspace \
          --timeout 300 \
          --skip-clean \
          --exclude-files "tests/*" "examples/*" \
          --out xml \
          --output-dir ./coverage
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/cobertura.xml
        fail_ci_if_error: true
        verbose: true

  # Matrix Testing Across Environments
  matrix-tests:
    name: Matrix Tests
    runs-on: ${{ matrix.os }}
    needs: code-quality
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, 1.75.0]  # Current MSRV
        database: [mongodb, postgresql]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-
          
    - name: Build with ${{ matrix.database }} features
      run: cargo build --verbose --features ${{ matrix.database }}
      
    - name: Test with ${{ matrix.database }} features
      run: cargo test --lib --verbose --features ${{ matrix.database }}