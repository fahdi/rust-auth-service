name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug

# Concurrency control to cancel previous runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read

jobs:
  # 1. QUICK VALIDATION - Fast feedback
  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.pull_request.draft == false || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-quick-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-quick-
          ${{ runner.os }}-cargo-
          
    - name: Check code formatting
      run: |
        if ! cargo fmt --all -- --check; then
          echo "❌ Code formatting issues found!"
          echo "Run 'cargo fmt' to fix formatting."
          exit 1
        fi
        
    - name: Run clippy lints
      run: |
        cargo clippy --all-targets --all-features -- \
          -D warnings \
          -A clippy::uninlined-format-args \
          -A clippy::derivable-impls \
          -A clippy::needless-return \
          -A clippy::module-name-repetitions
          
    - name: Check build
      run: cargo check --all-targets --all-features

  # 2. UNIT TESTS
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-
          
    - name: Run unit tests
      run: |
        cargo test --lib --verbose -- \
          --skip mongodb \
          --skip redis \
          --skip postgresql \
          --skip integration
          
    - name: Run doc tests
      run: cargo test --doc

  # 3. INTEGRATION TESTS
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: unit-tests
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: auth_test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: auth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-integration-
          ${{ runner.os }}-cargo-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
    - name: Wait for services
      run: |
        timeout 60s bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        timeout 60s bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
        timeout 60s bash -c 'until mongosh --host localhost:27017 --username admin --password password --eval "db.adminCommand(\"ping\")" --quiet; do sleep 1; done'
        
    - name: Set up test environment
      run: |
        echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/auth_test" >> $GITHUB_ENV
        echo "MONGODB_URL=mongodb://admin:password@localhost:27017/auth_test?authSource=admin" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key-for-ci-testing-only" >> $GITHUB_ENV
        echo "TEST_MODE=true" >> $GITHUB_ENV
        
    - name: Run integration tests
      run: |
        # Run all tests that require services
        cargo test --verbose -- --test-threads=1 --nocapture

  # 4. SECURITY AUDIT
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-audit-
          ${{ runner.os }}-cargo-
          
    - name: Install security tools
      run: |
        cargo install cargo-audit cargo-deny --locked
        
    - name: Run dependency audit
      run: |
        cargo audit --ignore RUSTSEC-2023-0071 --ignore RUSTSEC-2024-0370
        
    - name: Check license compliance
      run: |
        cargo deny check licenses || echo "License check completed with warnings"
        
    - name: Secret scanning
      uses: trufflesecurity/trufflehog@v3.77.0
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  # 5. TEST COVERAGE (PR only)
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin --locked
      
    - name: Set up test environment
      run: |
        echo "MONGODB_URL=mongodb://admin:password@localhost:27017/auth_test?authSource=admin" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "JWT_SECRET=coverage-test-secret" >> $GITHUB_ENV
        echo "TEST_MODE=true" >> $GITHUB_ENV
        
    - name: Generate test coverage
      run: |
        cargo tarpaulin \
          --lib \
          --timeout 180 \
          --out Xml \
          --output-dir ./coverage \
          --exclude-files "src/main.rs" "src/bin/*" \
          --fail-under 60
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        file: ./coverage/cobertura.xml
        flags: pr-validation
        name: rust-auth-service-coverage
        fail_ci_if_error: false

  # 6. BUILD MATRIX (on main/develop)
  build-matrix:
    name: Build Matrix
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: unit-tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, 1.75.0]  # MSRV
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build
      run: cargo build --release --verbose
      
    - name: Test
      run: cargo test --lib --verbose

  # 7. DOCKER BUILD (on push to main)
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [integration-tests, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t rust-auth-service:latest -f docker/auth-service/Dockerfile .
        
    - name: Run basic container test
      run: |
        docker run --rm rust-auth-service:latest --help

  # 8. DEPLOYMENT CHECK (on main/tag)
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [integration-tests, security-audit, docker-build]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Build release binary
      run: cargo build --release --bin rust-auth-service
      
    - name: Test configuration loading
      run: |
        cp config.yml.example config.yml
        timeout 5s ./target/release/rust-auth-service --help || true
        
    - name: Check release readiness
      run: |
        echo "✅ Release build successful"
        echo "✅ Configuration loading verified"
        echo "✅ Docker build completed"
        echo "🚀 Ready for deployment!"

  # 9. PR STATUS SUMMARY
  pr-status:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [quick-checks, unit-tests, integration-tests, security-audit, test-coverage]
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        echo "quick_checks=${{ needs.quick-checks.result }}" >> $GITHUB_OUTPUT
        echo "unit_tests=${{ needs.unit-tests.result }}" >> $GITHUB_OUTPUT
        echo "integration_tests=${{ needs.integration-tests.result }}" >> $GITHUB_OUTPUT
        echo "security_audit=${{ needs.security-audit.result }}" >> $GITHUB_OUTPUT
        echo "test_coverage=${{ needs.test-coverage.result }}" >> $GITHUB_OUTPUT
        
        # Determine overall status
        if [[ "${{ needs.quick-checks.result }}" == "success" && 
              "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.security-audit.result }}" == "success" ]]; then
          echo "overall_status=success" >> $GITHUB_OUTPUT
          echo "status_icon=✅" >> $GITHUB_OUTPUT
          echo "status_message=All validation checks passed!" >> $GITHUB_OUTPUT
        else
          echo "overall_status=failure" >> $GITHUB_OUTPUT
          echo "status_icon=❌" >> $GITHUB_OUTPUT
          echo "status_message=Some validation checks failed!" >> $GITHUB_OUTPUT
        fi
        
    - name: Comment PR status
      uses: actions/github-script@v7
      with:
        script: |
          const { status_icon, status_message, quick_checks, unit_tests, integration_tests, security_audit, test_coverage } = ${{ steps.status.outputs }};
          
          const report = `## ${{ steps.status.outputs.status_icon }} CI/CD Validation Report
          
          **Overall Status:** ${{ steps.status.outputs.status_message }}
          
          ### Job Results:
          - **Quick Checks:** ${{ needs.quick-checks.result == 'success' && '✅' || '❌' }} ${{ needs.quick-checks.result }}
          - **Unit Tests:** ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} ${{ needs.unit-tests.result }}
          - **Integration Tests:** ${{ needs.integration-tests.result == 'success' && '✅' || '❌' }} ${{ needs.integration-tests.result }}
          - **Security Audit:** ${{ needs.security-audit.result == 'success' && '✅' || '❌' }} ${{ needs.security-audit.result }}
          - **Test Coverage:** ${{ needs.test-coverage.result == 'success' && '✅' || needs.test-coverage.result == 'skipped' && '⏭️' || '❌' }} ${{ needs.test-coverage.result }}
          
          ${{ steps.status.outputs.overall_status == 'success' && '🎉 Ready for review and merge!' || '🔧 Please address the failing checks above.' }}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
          
    - name: Set final status
      if: always()
      run: |
        if [[ "${{ steps.status.outputs.overall_status }}" == "failure" ]]; then
          echo "❌ PR validation failed!"
          exit 1
        else
          echo "✅ PR validation passed!"
        fi

  # 10. DRAFT PR SUPPORT
  draft-pr-check:
    name: Draft PR Quick Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.pull_request.draft == true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Quick format check
      run: cargo fmt --all -- --check
      
    - name: Quick lint check
      run: cargo clippy --lib -- -D warnings -A clippy::uninlined-format-args
      
    - name: Build check
      run: cargo check --lib
      
    - name: Comment on draft PR
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 📝 Draft PR Quick Validation
            
            ✅ Basic validation completed for draft PR!
            
            **Completed Checks:**
            - ✅ Code formatting
            - ✅ Basic linting  
            - ✅ Build verification
            
            **Next Steps:**
            1. Continue development
            2. Mark as "Ready for review" when complete
            3. Full CI/CD validation will run automatically
            `
          });