name: Coverage Validation

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run coverage analysis daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  COVERAGE_THRESHOLD: 70
  TARGET_COVERAGE: 80

jobs:
  # Coverage Analysis Job
  coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for trend analysis

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-
          ${{ runner.os }}-cargo-

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Install additional tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        # Install coverage badge generator
        cargo install grcov || true

    - name: Wait for services
      run: |
        echo "Waiting for Redis..."
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        echo "Waiting for MongoDB..."
        timeout 30 bash -c 'until mongosh --host localhost:27017 --username admin --password password --eval "db.adminCommand(\"ping\")" --quiet; do sleep 1; done'

    - name: Run comprehensive coverage analysis
      run: |
        # Create coverage directory
        mkdir -p coverage/reports coverage/history coverage/modules
        
        # Run tarpaulin with comprehensive configuration
        cargo tarpaulin \
          --lib \
          --tests \
          --verbose \
          --timeout 180 \
          --out Html,Xml,Json,Stdout \
          --output-dir coverage \
          --exclude-files "src/main.rs" \
          --exclude-files "src/bin/*" \
          --exclude-files "tests/common/*" \
          --ignore-panics \
          --follow-exec \
          --fail-under ${{ env.COVERAGE_THRESHOLD }} \
          2>&1 | tee coverage/coverage_analysis.log

    - name: Extract coverage metrics
      id: coverage
      run: |
        # Extract coverage percentage from tarpaulin output
        COVERAGE_PERCENT=$(grep -oE "[0-9]+\.[0-9]+% coverage" coverage/coverage_analysis.log | grep -oE "[0-9]+\.[0-9]+" | tail -1)
        echo "coverage_percent=${COVERAGE_PERCENT}" >> $GITHUB_OUTPUT
        
        # Extract lines covered
        LINES_COVERED=$(grep -oE "[0-9]+/[0-9]+ lines covered" coverage/coverage_analysis.log | tail -1)
        echo "lines_covered=${LINES_COVERED}" >> $GITHUB_OUTPUT
        
        # Determine coverage status
        COVERAGE_INT=$(echo "${COVERAGE_PERCENT}" | cut -d'.' -f1)
        if [ "${COVERAGE_INT}" -ge "${{ env.TARGET_COVERAGE }}" ]; then
          echo "coverage_status=excellent" >> $GITHUB_OUTPUT
          echo "coverage_color=brightgreen" >> $GITHUB_OUTPUT
        elif [ "${COVERAGE_INT}" -ge "${{ env.COVERAGE_THRESHOLD }}" ]; then
          echo "coverage_status=good" >> $GITHUB_OUTPUT
          echo "coverage_color=green" >> $GITHUB_OUTPUT
        else
          echo "coverage_status=needs_improvement" >> $GITHUB_OUTPUT
          echo "coverage_color=red" >> $GITHUB_OUTPUT
        fi

    - name: Generate coverage trends
      run: |
        # Create coverage history entry
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        cat > coverage/history/coverage_${TIMESTAMP}.json << EOF
        {
          "timestamp": "${TIMESTAMP}",
          "date": "$(date -Iseconds)",
          "coverage_percent": ${{ steps.coverage.outputs.coverage_percent }},
          "lines_covered": "${{ steps.coverage.outputs.lines_covered }}",
          "branch": "${GITHUB_REF_NAME}",
          "commit": "${GITHUB_SHA}",
          "workflow_run_id": "${GITHUB_RUN_ID}",
          "actor": "${GITHUB_ACTOR}"
        }
        EOF

    - name: Generate coverage badge
      run: |
        # Create coverage badge data
        cat > coverage/badge.json << EOF
        {
          "schemaVersion": 1,
          "label": "coverage",
          "message": "${{ steps.coverage.outputs.coverage_percent }}%",
          "color": "${{ steps.coverage.outputs.coverage_color }}"
        }
        EOF

    - name: Module-specific coverage analysis
      run: |
        # Analyze critical modules individually
        echo "Analyzing module-specific coverage..."
        
        # Authentication modules
        echo "## Authentication Modules" >> coverage/module_analysis.md
        grep -A 5 -B 5 "src/handlers/auth.rs" coverage/coverage_analysis.log >> coverage/module_analysis.md || echo "No data for auth handlers" >> coverage/module_analysis.md
        grep -A 5 -B 5 "src/utils/jwt.rs" coverage/coverage_analysis.log >> coverage/module_analysis.md || echo "No data for JWT utils" >> coverage/module_analysis.md
        grep -A 5 -B 5 "src/utils/password.rs" coverage/coverage_analysis.log >> coverage/module_analysis.md || echo "No data for password utils" >> coverage/module_analysis.md
        
        # Database modules  
        echo "## Database Modules" >> coverage/module_analysis.md
        grep -A 5 -B 5 "src/database/" coverage/coverage_analysis.log >> coverage/module_analysis.md || echo "No data for database modules" >> coverage/module_analysis.md
        
        # Cache modules
        echo "## Cache Modules" >> coverage/module_analysis.md
        grep -A 5 -B 5 "src/cache/" coverage/coverage_analysis.log >> coverage/module_analysis.md || echo "No data for cache modules" >> coverage/module_analysis.md

    - name: Generate coverage summary
      run: |
        cat > coverage/COVERAGE_SUMMARY.md << 'EOF'
        # Test Coverage Summary
        
        ## Overall Statistics
        - **Coverage**: ${{ steps.coverage.outputs.coverage_percent }}%
        - **Lines Covered**: ${{ steps.coverage.outputs.lines_covered }}
        - **Status**: ${{ steps.coverage.outputs.coverage_status }}
        - **Threshold**: ${{ env.COVERAGE_THRESHOLD }}%
        - **Target**: ${{ env.TARGET_COVERAGE }}%
        - **Generated**: $(date)
        - **Branch**: ${GITHUB_REF_NAME}
        - **Commit**: ${GITHUB_SHA:0:8}
        
        ## Threshold Analysis
        EOF
        
        if [ "${{ steps.coverage.outputs.coverage_status }}" = "excellent" ]; then
          echo "✅ **EXCELLENT** - Coverage exceeds target threshold" >> coverage/COVERAGE_SUMMARY.md
        elif [ "${{ steps.coverage.outputs.coverage_status }}" = "good" ]; then
          echo "✅ **GOOD** - Coverage meets minimum threshold" >> coverage/COVERAGE_SUMMARY.md
        else
          echo "❌ **NEEDS IMPROVEMENT** - Coverage below minimum threshold" >> coverage/COVERAGE_SUMMARY.md
        fi
        
        cat >> coverage/COVERAGE_SUMMARY.md << 'EOF'
        
        ## Reports Available
        - [HTML Report](./tarpaulin-report.html)
        - [XML Report](./cobertura.xml) 
        - [JSON Report](./tarpaulin-report.json)
        - [Module Analysis](./module_analysis.md)
        
        ## Coverage Goals by Module
        | Module | Current | Target | Status |
        |--------|---------|--------|---------|
        | Authentication | TBD | 85% | Analyzing |
        | JWT Utils | TBD | 90% | Analyzing |
        | Password Utils | TBD | 85% | Analyzing |
        | Database | TBD | 75% | Analyzing |
        | Cache | TBD | 70% | Analyzing |
        | Rate Limiting | TBD | 85% | Analyzing |
        | MFA | TBD | 80% | Analyzing |
        
        EOF

    - name: Validate coverage thresholds
      run: |
        COVERAGE_INT=$(echo "${{ steps.coverage.outputs.coverage_percent }}" | cut -d'.' -f1)
        
        echo "Coverage Analysis Results:"
        echo "=========================="
        echo "Coverage: ${{ steps.coverage.outputs.coverage_percent }}%"
        echo "Minimum Threshold: ${{ env.COVERAGE_THRESHOLD }}%"
        echo "Target Threshold: ${{ env.TARGET_COVERAGE }}%"
        echo "Status: ${{ steps.coverage.outputs.coverage_status }}"
        
        if [ "${COVERAGE_INT}" -lt "${{ env.COVERAGE_THRESHOLD }}" ]; then
          echo "❌ Coverage validation FAILED - Below minimum threshold"
          echo "Required: ${{ env.COVERAGE_THRESHOLD }}%, Actual: ${{ steps.coverage.outputs.coverage_percent }}%"
          exit 1
        else
          echo "✅ Coverage validation PASSED"
        fi

    - name: Upload coverage to Codecov
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: rust-auth-service-coverage
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage summary
          let coverageSummary = '';
          try {
            coverageSummary = fs.readFileSync('coverage/COVERAGE_SUMMARY.md', 'utf8');
          } catch (error) {
            coverageSummary = `
            # Coverage Analysis
            
            Coverage: ${{ steps.coverage.outputs.coverage_percent }}%
            Status: ${{ steps.coverage.outputs.coverage_status }}
            Lines: ${{ steps.coverage.outputs.lines_covered }}
            `;
          }
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 📊 Test Coverage Report
            
            ${coverageSummary}
            
            [View detailed coverage report](https://app.codecov.io/gh/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number})
            `
          });

    - name: Archive coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ github.run_number }}
        path: |
          coverage/
          !coverage/.git
        retention-days: 30

    - name: Fail on insufficient coverage
      if: steps.coverage.outputs.coverage_status == 'needs_improvement'
      run: |
        echo "❌ Build failed due to insufficient test coverage"
        echo "Current: ${{ steps.coverage.outputs.coverage_percent }}%"
        echo "Required: ${{ env.COVERAGE_THRESHOLD }}%"
        echo ""
        echo "Please add tests to improve coverage before merging."
        exit 1

  # Coverage trend tracking job
  coverage-trends:
    name: Coverage Trend Analysis
    runs-on: ubuntu-latest
    needs: coverage
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports-${{ github.run_number }}
        path: coverage/

    - name: Update coverage trends
      run: |
        echo "Updating coverage trend tracking..."
        
        # This would integrate with external services or internal databases
        # For now, we'll create a simple trend file
        
        if [ ! -f coverage_trends.json ]; then
          echo "[]" > coverage_trends.json
        fi
        
        # Add current coverage data
        jq ". += [{
          \"date\": \"$(date -Iseconds)\",
          \"coverage\": ${{ needs.coverage.outputs.coverage_percent }},
          \"commit\": \"${GITHUB_SHA}\",
          \"run_id\": \"${GITHUB_RUN_ID}\"
        }]" coverage_trends.json > coverage_trends_new.json
        
        mv coverage_trends_new.json coverage_trends.json
        
        echo "Coverage trend updated"