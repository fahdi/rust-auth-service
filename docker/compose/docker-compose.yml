version: '3.8'

services:
  # Rust Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    environment:
      - RUST_LOG=info
      - DATABASE_URL=mongodb://admin:password123@mongodb:27017/auth_service?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=super-secret-key-change-in-production-please
      - EMAIL_PROVIDER=smtp
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
    depends_on:
      - mongodb
      - redis
      - mailhog
    networks:
      - auth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=auth_service
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - auth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # PostgreSQL Database  
  postgresql:
    image: postgres:16.1-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=auth_service
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ../../migrations/postgresql:/docker-entrypoint-initdb.d:ro
    networks:
      - auth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_service"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - auth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MailHog Email Testing
  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "1026:1025"  # SMTP (changed to avoid conflict)
      - "8026:8025"  # Web UI (changed to avoid conflict)
    networks:
      - auth-network
    restart: unless-stopped
    environment:
      - MH_STORAGE=memory

  # MongoDB Express (Optional - Database Admin UI)
  mongo-express:
    image: mongo-express:1.0.2-20
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password123@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - mongodb
    networks:
      - auth-network
    restart: unless-stopped
    profiles:
      - admin

  # Redis Insight (Optional - Redis Admin UI)  
  redis-insight:
    image: redislabs/redisinsight:2.38
    ports:
      - "8082:8001"
    volumes:
      - redis_insight_data:/data
    networks:
      - auth-network
    restart: unless-stopped
    profiles:
      - admin

volumes:
  mongodb_data:
    driver: local
  postgresql_data:
    driver: local
  redis_data:
    driver: local  
  redis_insight_data:
    driver: local
  cargo_cache:
    driver: local
  target_cache:
    driver: local

networks:
  auth-network:
    driver: bridge